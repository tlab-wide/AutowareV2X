{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"AutowareV2X Documentation","text":""},{"location":"#about-autowarev2x","title":"About AutowareV2X","text":"<p>AutowareV2X is an open-source module that can be added onto the newest Autoware.universe to enable V2X communication.</p> <p>It utilizes Vanetza as the protocol suite for ETSI C-ITS standards.</p> <p>We have also provided a working example of a CPM application, where Collective Perception Messages can be used to exchange perception information in Autoware.</p> <p></p> <p>AutowareV2X can be used in various V2X scenarios across different radio access channels.</p> <p></p>"},{"location":"#getting-started","title":"Getting started","text":"<ul> <li>Installation pages explain the installation steps of AutowareV2X and its prerequisites.</li> <li>Tutorials pages provide several tutorials to follow after installation.</li> <li>Design pages explain the design concept and architecture of AutowareV2X.</li> <li>Support pages are the place to go if you need additional help.</li> </ul>"},{"location":"design/","title":"Design","text":"<p>Warning</p> <p>More to come</p> <p>A V2X communication software stack called Vanetza  is integrated into the standalone autonomous driving software stack, Autoware. The V2X stack and the autonomous driving stack can be decoupled, allowing other applications to utilize the V2X router as well. A high-level overview of the architecture is shown below. </p> <p></p> <p>Autoware is responsible for the perception task, while AutowareV2X manages the transmission and reception of messages over the V2X channel. Services that are necessary for the integration of Vanetza into Autoware were newly developed.</p> <p>The V2XApp is responsible for managing the various facilities such as DENM, CAM, CPM, while the V2XNode handles the conversion of information between the V2X messages and ROS2 messages.</p>"},{"location":"design/#v2xnode","title":"V2XNode","text":"<p>The V2XNode launches a ROS2 Node for AutowareV2X. Its main purpose is to act as the bridge interface between Autoware and AutowareV2X. Information that is to be utilized in V2X Applications are retreived from Autoware in the form of ROS2 topics. Similarily, information that is received by AutowareV2X through V2X communications is published as ROS2 topics in order to feed it back into Autoware. </p>"},{"location":"design/#input","title":"Input","text":"Name Type Description <code>/perception/object_recognition/objects</code> <code>autoware_auto_perception_msgs::msg::PredictedObjects</code> Perceived Objects by Autoware <code>/tf</code> <code>tf2_msgs::msg::TFMessage</code> Pose of Ego Vehicle"},{"location":"design/#output","title":"Output","text":"Name Type Description <code>/v2x/cpm/objects</code> <code>autoware_auto_perception_msgs::msg::PredictedObjects</code> Objects received by CPMs"},{"location":"design/#functions","title":"Functions","text":"Name Description <code>objectsCallback(const autoware_auto_perception_msgs::msg::PredictedObjects::ConstSharedPtr msg)</code> Call <code>V2XApp::objectsCallback</code> <code>tfCallback</code> Call <code>V2XApp::tfCallback</code> <code>publishObjects(std::vector&lt;CpmApplication::Object&gt; *objectsStack, int cpm_num)</code> <code>publishCpmSenderObject</code> Not used now"},{"location":"design/#v2xapp","title":"V2XApp","text":""},{"location":"design/#cpm-facility","title":"CPM Facility","text":""},{"location":"how-to-guides/","title":"How-to-guides","text":"<p>Warning</p> <p>Under Construction</p>"},{"location":"installation/","title":"Installing AutowareV2X","text":"<p>AutowareV2X is used as an add-on module to the open-source autonomous driving stack called Autoware. Therefore, in order to properly use AutowareV2X, Autoware must first be installed on the system.</p> <p>You can install AutowareV2X directly onto a PC through the Source Installation or use it as a Docker container through the Docker Installation.</p> <p>Note</p> <p>In order to proceed with the Tutorials, you will need to continue with the Docker Installatioon.</p>"},{"location":"installation/docker-installation/","title":"Docker Installation","text":"<p>In order to run the simulations explained in the Tutorials section, you will need to proceed with the Docker installation.</p> <p>Note</p> <p>Also refer to Autoware's Docker Installation for the Docker-based installation of Autoware.universe.</p>"},{"location":"installation/docker-installation/#installing-autoware-docker-version","title":"Installing Autoware (Docker version)","text":"<p>For the newest documentation for the Docker installation of Autoware, see their official documentation.</p>"},{"location":"installation/docker-installation/#prerequisites","title":"Prerequisites","text":"<ul> <li>git</li> </ul>"},{"location":"installation/docker-installation/#setup","title":"Setup","text":"<ol> <li> <p>Prepare the repository. <pre><code>mkdir -p ~/workspace &amp;&amp; cd ~/workspace\ngit clone https://github.com/autowarefoundation/autoware.git autoware_docker\ncd autoware_docker\n</code></pre></p> </li> <li> <p>Run the setup script for docker installation. <pre><code>./setup-dev-env.sh docker\n</code></pre> You will need to restart your PC after the script is finished running.</p> </li> <li> <p>Make directory to store maps <pre><code>mkdir -p ~/data/maps\n</code></pre></p> </li> </ol>"},{"location":"installation/docker-installation/#launch-container","title":"Launch container","text":"<pre><code># Launch Autoware container (with NVIDIA GPU)\nrocker --nvidia --x11 --user --privileged --volume $HOME/workspace/autoware_docker --volume $HOME/data -- ghcr.io/autowarefoundation/autoware-universe:latest-cuda\n\n# Launch Autoware container (without NVIDIA GPU)\nrocker -e LIBGL_ALWAYS_SOFTWARE=1 --x11 --user --privileged --volume $HOME/workspace/autoware_docker --volume $HOME/data -- ghcr.io/autowarefoundation/autoware-universe:latest-cuda\n</code></pre>"},{"location":"installation/docker-installation/#adding-autowarev2x","title":"Adding AutowareV2X","text":"<p>Note</p> <p>From here, run commands inside the container.</p> <ol> <li> <p>Move into <code>autoware_docker</code> directory. <pre><code>cd ~/workspace/autoware_docker\n</code></pre></p> </li> <li> <p>Edit the <code>autoware.repos</code> file and replace the following repositories. <pre><code>repositories:\n  core/autoware.core:\n    type: git\n    url: https://github.com/autowarefoundation/autoware.core.git\n    version: 6bafedfb24fb34157ed65bfe3f6f4c1ed0fbc80b\n  core/autoware_adapi_msgs:\n    type: git\n    url: https://github.com/autowarefoundation/autoware_adapi_msgs.git\n    version: 9679b5a7a1f4cfff2fa50b80d2759d3937f2f953\n  core/autoware_common:\n    type: git\n    url: https://github.com/autowarefoundation/autoware_common.git\n    version: 6916df26fafe6749db4b1d5bd6636a92444fc48d\n  core/autoware_msgs:\n    type: git\n    url: https://github.com/autowarefoundation/autoware_msgs.git\n    version: 4f13d4b8b465ed7f424fce9af17882dbe1752875\n  core/external/autoware_auto_msgs:\n    type: git\n    url: https://github.com/tier4/autoware_auto_msgs.git\n    version: 6b5bc4365f9a2fc913bc11afa74ec21ffa2dbf32\n  launcher/autoware_launch:\n    type: git\n    url: https://github.com/autowarefoundation/autoware_launch.git\n    version: e4abe673667a8d4f2d783ed22edacbf5d4784b8f\n  param/autoware_individual_params:\n    type: git\n    url: https://github.com/autowarefoundation/autoware_individual_params.git\n    version: 79cff0ba014808050be6f5cb3b4764ba2c96c21c\n  sensor_component/external/sensor_component_description:\n    type: git\n    url: https://github.com/tier4/sensor_component_description.git\n    version: 475857daeb4c4883ab0295336713364b326e8278\n  sensor_component/external/tamagawa_imu_driver:\n    type: git\n    url: https://github.com/tier4/tamagawa_imu_driver.git\n    version: 28ad3cd4fb043e5f92353a540c3531cd4cb7bef3\n  sensor_component/external/velodyne_vls:\n    type: git\n    url: https://github.com/tier4/velodyne_vls.git\n    version: baeafaf9a376c5798f7b67a77211890c33900f84\n  sensor_kit/external/awsim_sensor_kit_launch:\n    type: git\n    url: https://github.com/RobotecAI/awsim_sensor_kit_launch.git\n    version: d9022ee9bbfd958c239b673cfbb230eea50607be\n  sensor_kit/sample_sensor_kit_launch:\n    type: git\n    url: https://github.com/autowarefoundation/sample_sensor_kit_launch.git\n    version: 03decbd31bb954eb9f52daaf3a3fa2b921dbb0c3\n  universe/autoware.universe:\n    type: git\n    url: https://github.com/autowarefoundation/autoware.universe.git\n    version: febbc135b8e09e993ed345ee6d3cd7e65b6c1d68\n  universe/external/morai_msgs:\n    type: git\n    url: https://github.com/MORAI-Autonomous/MORAI-ROS2_morai_msgs.git\n    version: 6fd6a711e4bbf8a9989b54028e8074acabbbce6f\n  universe/external/muSSP:\n    type: git\n    url: https://github.com/tier4/muSSP.git\n    version: c79e98fd5e658f4f90c06d93472faa977bc873b9\n  universe/external/ndt_omp:\n    type: git\n    url: https://github.com/tier4/ndt_omp.git\n    version: f59e1667390fe66d72c5c3aa0b25385b5b6dd8cf\n  universe/external/pointcloud_to_laserscan:\n    type: git\n    url: https://github.com/tier4/pointcloud_to_laserscan.git\n    version: 948a4fca35dcb03c6c8fbfa610a686f7c919fe0b\n  universe/external/tier4_ad_api_adaptor:\n    type: git\n    url: https://github.com/tier4/tier4_ad_api_adaptor.git\n    version: 5084f9c8eaf03458a216060798da2b1e4fa96f28\n  universe/external/tier4_autoware_msgs:\n    type: git\n    url: https://github.com/tier4/tier4_autoware_msgs.git\n    version: a360ee9f5235a0d426427813f26e43027e32139d\n  vehicle/external/pacmod_interface:\n    type: git\n    url: https://github.com/tier4/pacmod_interface.git\n    version: b5ae20345f2551da0c6e4140a3dc3479d64efd1f\n  vehicle/sample_vehicle_launch:\n    type: git\n    url: https://github.com/autowarefoundation/sample_vehicle_launch.git\n    version: 157238ca77de7b0a59f71a0b28f456741fab3ca2\n  v2x/autowarev2x:\n    type: git\n    url: https://github.com/tlab-wide/AutowareV2X.git\n    version: 48a1f2d3db6ae59e92febb93aad7cde760f4f3ec\n  v2x/vanetza:\n    type: git\n    url: https://github.com/yuasabe/vanetza.git\n    version: cfffe9afda177297c59bbb804d3e8f66120c8453\n</code></pre></p> </li> </ol> <p>Note</p> <p>If you want to\u3000follow the latest ver, edit the <code>autoware.repos</code> file and add the following two repositories to the end.</p> <pre><code>v2x/autowarev2x:\n  type: git\n  url: https://github.com/tlab-wide/AutowareV2X.git\n  version: cpm-tr\nv2x/vanetza:\n  type: git\n  url: https://github.com/yuasabe/vanetza.git\n  version: master\n</code></pre> <ol> <li> <p>Update the repository <pre><code>mkdir src\nvcs import src &lt; autoware.repos\nvcs pull src\n</code></pre></p> </li> <li> <p>Install dependent ROS packages <pre><code>sudo apt update\nrosdep update\nrosdep install --from-paths . --ignore-src --rosdistro $ROS_DISTRO -r\n</code></pre></p> </li> <li> <p>Build the workspace <pre><code>colcon build --symlink-install --cmake-args -DCMAKE_BUILD_TYPE=Release\n</code></pre></p> </li> </ol>"},{"location":"installation/source-installation/","title":"Source Installation","text":""},{"location":"installation/source-installation/#prerequisites","title":"Prerequisites","text":"<ul> <li>OS<ul> <li>Ubuntu 20.04</li> <li>Ubuntu 22.04</li> </ul> </li> <li>ROS<ul> <li>ROS2 Galactic</li> </ul> </li> </ul>"},{"location":"installation/source-installation/#installing-autoware","title":"Installing Autoware","text":"<p>Refer to the Official Autoware Documentation for the newest installation procedures. In a nutshell, you can run the following commands:</p> <pre><code># Clone repository\ngit clone https://github.com/autowarefoundation/autoware.git\ncd autoware\n\n# Install dependencies using Ansible\n./setup-dev-env.sh\n\n# Use vcstool to import more repositories\nmkdir src\nvcs import src &lt; autoware.repos\n\n# Install dependent ROS packages\nsource /opt/ros/galactic/setup.bash\nrosdep update\nrosdep install -y --from-paths src --ignore-src --rosdistro $ROS_DISTRO\n\n# Build the workspace\ncolcon build --symlink-install --cmake-args -DCMAKE_BUILD_TYPE=Release\n</code></pre>"},{"location":"installation/source-installation/#adding-autowarev2x","title":"Adding AutowareV2X","text":"<ol> <li>Edit the <code>autoware.repos</code> file and replace the following repositories. <pre><code>repositories:\n  core/autoware.core:\n    type: git\n    url: https://github.com/autowarefoundation/autoware.core.git\n    version: 6bafedfb24fb34157ed65bfe3f6f4c1ed0fbc80b\n  core/autoware_adapi_msgs:\n    type: git\n    url: https://github.com/autowarefoundation/autoware_adapi_msgs.git\n    version: 9679b5a7a1f4cfff2fa50b80d2759d3937f2f953\n  core/autoware_common:\n    type: git\n    url: https://github.com/autowarefoundation/autoware_common.git\n    version: 6916df26fafe6749db4b1d5bd6636a92444fc48d\n  core/autoware_msgs:\n    type: git\n    url: https://github.com/autowarefoundation/autoware_msgs.git\n    version: 4f13d4b8b465ed7f424fce9af17882dbe1752875\n  core/external/autoware_auto_msgs:\n    type: git\n    url: https://github.com/tier4/autoware_auto_msgs.git\n    version: 6b5bc4365f9a2fc913bc11afa74ec21ffa2dbf32\n  launcher/autoware_launch:\n    type: git\n    url: https://github.com/autowarefoundation/autoware_launch.git\n    version: e4abe673667a8d4f2d783ed22edacbf5d4784b8f\n  param/autoware_individual_params:\n    type: git\n    url: https://github.com/autowarefoundation/autoware_individual_params.git\n    version: 79cff0ba014808050be6f5cb3b4764ba2c96c21c\n  sensor_component/external/sensor_component_description:\n    type: git\n    url: https://github.com/tier4/sensor_component_description.git\n    version: 475857daeb4c4883ab0295336713364b326e8278\n  sensor_component/external/tamagawa_imu_driver:\n    type: git\n    url: https://github.com/tier4/tamagawa_imu_driver.git\n    version: 28ad3cd4fb043e5f92353a540c3531cd4cb7bef3\n  sensor_component/external/velodyne_vls:\n    type: git\n    url: https://github.com/tier4/velodyne_vls.git\n    version: baeafaf9a376c5798f7b67a77211890c33900f84\n  sensor_kit/external/awsim_sensor_kit_launch:\n    type: git\n    url: https://github.com/RobotecAI/awsim_sensor_kit_launch.git\n    version: d9022ee9bbfd958c239b673cfbb230eea50607be\n  sensor_kit/sample_sensor_kit_launch:\n    type: git\n    url: https://github.com/autowarefoundation/sample_sensor_kit_launch.git\n    version: 03decbd31bb954eb9f52daaf3a3fa2b921dbb0c3\n  universe/autoware.universe:\n    type: git\n    url: https://github.com/autowarefoundation/autoware.universe.git\n    version: febbc135b8e09e993ed345ee6d3cd7e65b6c1d68\n  universe/external/morai_msgs:\n    type: git\n    url: https://github.com/MORAI-Autonomous/MORAI-ROS2_morai_msgs.git\n    version: 6fd6a711e4bbf8a9989b54028e8074acabbbce6f\n  universe/external/muSSP:\n    type: git\n    url: https://github.com/tier4/muSSP.git\n    version: c79e98fd5e658f4f90c06d93472faa977bc873b9\n  universe/external/ndt_omp:\n    type: git\n    url: https://github.com/tier4/ndt_omp.git\n    version: f59e1667390fe66d72c5c3aa0b25385b5b6dd8cf\n  universe/external/pointcloud_to_laserscan:\n    type: git\n    url: https://github.com/tier4/pointcloud_to_laserscan.git\n    version: 948a4fca35dcb03c6c8fbfa610a686f7c919fe0b\n  universe/external/tier4_ad_api_adaptor:\n    type: git\n    url: https://github.com/tier4/tier4_ad_api_adaptor.git\n    version: 5084f9c8eaf03458a216060798da2b1e4fa96f28\n  universe/external/tier4_autoware_msgs:\n    type: git\n    url: https://github.com/tier4/tier4_autoware_msgs.git\n    version: a360ee9f5235a0d426427813f26e43027e32139d\n  vehicle/external/pacmod_interface:\n    type: git\n    url: https://github.com/tier4/pacmod_interface.git\n    version: b5ae20345f2551da0c6e4140a3dc3479d64efd1f\n  vehicle/sample_vehicle_launch:\n    type: git\n    url: https://github.com/autowarefoundation/sample_vehicle_launch.git\n    version: 157238ca77de7b0a59f71a0b28f456741fab3ca2\n  v2x/autowarev2x:\n    type: git\n    url: https://github.com/tlab-wide/AutowareV2X.git\n    version: 48a1f2d3db6ae59e92febb93aad7cde760f4f3ec\n  v2x/vanetza:\n    type: git\n    url: https://github.com/yuasabe/vanetza.git\n    version: cfffe9afda177297c59bbb804d3e8f66120c8453\n</code></pre></li> </ol> <p>Note</p> <p>If you want to\u3000follow the latest ver, edit the <code>autoware.repos</code> file and add the following two repositories to the end.</p> <pre><code>v2x/autowarev2x:\n  type: git\n  url: https://github.com/tlab-wide/AutowareV2X.git\n  version: cpm-tr\nv2x/vanetza:\n  type: git\n  url: https://github.com/yuasabe/vanetza.git\n  version: master\n</code></pre> <ol> <li> <p>Update the repository <pre><code>vcs import src &lt; autoware.repos\nvcs pull src\n</code></pre></p> </li> <li> <p>Install dependent ROS packages <pre><code>source /opt/ros/galactic/setup.bash\nrosdep install -y --from-paths src --ignore-src --rosdistro $ROS_DISTRO\n</code></pre></p> </li> <li> <p>Build the workspace <pre><code>colcon build --symlink-install --cmake-args -DCMAKE_BUILD_TYPE=Release\n</code></pre></p> </li> </ol>"},{"location":"support/","title":"Support","text":"<ul> <li>Contact: yuasabe[at]hongo.wide.ad.jp</li> </ul>"},{"location":"support/docs-guide/","title":"How to generate Documentation","text":""},{"location":"support/docs-guide/#mkdocs","title":"mkdocs","text":"<p>Run development server. <pre><code>mkdocs serve\n</code></pre></p> <p>Deploy to gh-pages. <pre><code>mkdocs gh-deploy\n</code></pre></p>"},{"location":"support/docs-guide/#doxygen","title":"Doxygen","text":"<pre><code>doxygen Doxyfile\n</code></pre>"},{"location":"tutorials/","title":"Tutorials","text":"<p>AutowareV2X can be first verified using Autoware's Planning Simulator.</p> <ul> <li>Running Autoware in the Planning Simulator</li> </ul> <p>Then, after you are familiar with how AutowareV2X works, you can use actual devices to test AutowareV2X.</p> <ul> <li>Running AutowareV2X on Actual Devices</li> </ul>"},{"location":"tutorials/actual-devices/","title":"Running AutowareV2X on Actual Devices","text":"<p>After testing functions in the simulator, it is time to install AutowareV2X on actual hardware.</p> <p>The setup that we consider is shown in the figure below. The Roadside Unit (RSU) acts as the CPM sender, and the CAV (Connected Autonomous Vehicle) is the CPM receiver. In terms of the software that comprises the RSU and CAV, they are both very similar. </p> <p>Take a look at the right hand side that shows the setup for the RSU. The sensing component for the RSU is a LiDAR (VLP-16) mounted on top of a tripod. The point cloud from the LiDAR is inputed into the Autoware PC with a normal Ethernet interface. The Autoware PC used here is an off-the-shelf gaming laptop. AutowareV2X is run on a separate machine, the Intel NUC, and it is connected to the Autoware PC via an Ethernet cable as well. All network interfaces, including the Wi-Fi module and 4G router in this case, is connected to the AutowareV2X PC. For the sake of simplicity, we will only focus on one Wi-Fi interface for this documentation. </p> <p>The set up for the vehicle is very similiar. The only difference is that the Autoware PC is now connected to the sensors and actuators of the vehicle.</p> <p>So, the bare minimum for a CPM sender and receiver setup using AutowareV2X is TWO sets of the following:</p> <ul> <li>Autoware PC (Running the latest Autoware.universe)</li> <li>AutowareV2X PC (Running the latest AutowareV2X)</li> <li>LiDAR sensor (Autoware compatible, only necessary at the CPM Sender)</li> </ul> <p>In this tutorial, we will explain how to set this up. Depending on the number of CPM senders or receivers you need, you will need to make more copies of the same setup. </p> <p></p>"},{"location":"tutorials/actual-devices/#equipments","title":"Equipments","text":"<p>The details for the equipment used in the setup is shown in the tables below.</p>"},{"location":"tutorials/actual-devices/#hardware-for-the-rsu","title":"Hardware for the RSU","text":"Purpose Device Specification AutowareV2X PC Intel NUC, Model: 11Pro OS: Ubuntu 20.04, ROS: Galactic, Software: AutowareV2X Autoware PC Gtune PC, Model: H5 OS: Ubuntu 20.04, ROS: Galactic, Software: Autoware.universe Wi-Fi Network Interface Netgear Wi-Fi Dongle, Model: A6210 Dual-band: 802.11b/g/n (2.4GHz), 802.11a/n/ac (5GHz) 4G/LTE Network Interface IDY IoM 5G Gateway, Model: iR730B Bands: 3G, 4G, 5G, nano PSIM, 4x high-performance active antennas Sensor VLP16 3D LiDAR Range: 100 m, Accuracy: +/- 3 cm, Rotation rate: 5-20 Hz, 16 channels"},{"location":"tutorials/actual-devices/#hardware-for-the-cav","title":"Hardware for the CAV","text":"Purpose Device Specification AutowareV2X PC Intel NUC, Model: 11Pro OS: Ubuntu 20.04, ROS: Galactic, Software: AutowareV2X Autoware PC Gigabyte PC, Model: AERO-15 OS: Ubuntu 20.04, ROS: Galactic, Software: Autoware.universe Wi-Fi Network Interface Netgear Wi-Fi Dongle, Model: A6210 Dual-band: 802.11b/g/n (2.4GHz), 802.11a/n/ac (5GHz) 4G/LTE Network Interface IDY IoM 5G Gateway, Model: iR730B Bands: 3G, 4G, 5G, nano PSIM, 4x high-performance active antennas Vehicle Model: Yamaha G30Es-Li Speed: less than 20 km/h, Sensor: VLP16 3D LiDAR (Rooftop)"},{"location":"tutorials/actual-devices/#autoware-pc","title":"Autoware PC","text":"<ol> <li> <p>For the Autoware PC, you can follow the normal installation procedures for Autoware.universe. A PC with a discrete GPU is recommended for better performance with sensor processing and object detection.</p> </li> <li> <p>Attach sensors to the Autoware PC (such as LiDARs) and make sure that you can start and run Autoware.</p> </li> <li> <p>Confirm that the following two ROS2 topics are being published:</p> <ul> <li><code>/perception/object_recognition/objects</code></li> <li><code>/tf</code></li> </ul> </li> </ol>"},{"location":"tutorials/actual-devices/#autowarev2x-pc","title":"AutowareV2X PC","text":""},{"location":"tutorials/actual-devices/#install-autowarev2x","title":"Install AutowareV2X","text":"<ol> <li> <p>Install Ubuntu 20.04 or 22.04 on a new PC.</p> </li> <li> <p>Follow the Source Installation Guide for AutowareV2X to set up AutowareV2X. Do note that here, you will be installing Autoware again onto this PC, alongside AutowareV2X. But in practice, we will not be using the Autoware here and will rather use the Autoware on the Autoware PC.</p> </li> </ol>"},{"location":"tutorials/actual-devices/#ros2-connectivity-of-autoware-pc-and-autowarev2x-pc","title":"ROS2 Connectivity of Autoware PC and AutowareV2X PC","text":"<ol> <li> <p>Connect the Autoware PC and AutowareV2X PC with an Ethernet cable (preferably Cat5e or above). Setup local IP addresses and IP routing on both the PCs so that they have IP reachability to each other. Confirm this by pinging each PC from the other.</p> </li> <li> <p>Once this is setup, when you run Autoware on the Autoware PC, you should see all the ROS2 topics on the AutowareV2X PC as well. Confirm this by running <code>ros2 topic list</code> on the AutowareV2X PC after running Autoware or the Planning Simulator on the Autoware PC.</p> </li> </ol> <p>Note</p> <p>At this point, it may be wise to create at least two sets of the Autoware PC and AutowareV2X PC setup. One for the sender and the other for the receiver.</p>"},{"location":"tutorials/actual-devices/#wi-fi-interface-for-cpm-transmission","title":"Wi-Fi interface for CPM transmission","text":"<ol> <li> <p>Attach a network interface to the AutowareV2X PC. You can use the default Wi-Fi interface or attach an USB dongle if necessary.</p> </li> <li> <p>Create an Wi-Fi adhoc network to send the CPMs in. Sample commands are as below. Substitute the name of the network interface, and remember to change the IP address of the sender and receiver.</p> </li> </ol> <pre><code>sudo systemctl stop network-manager\nsudo ifconfig wlx94a67e5d6f4d down\nsudo iwconfig wlx94a67e5d6f4d mode ad-hoc\nsudo iwconfig wlx94a67e5d6f4d essid CITS-EXP\nsudo ip addr add 10.0.0.2/24 dev wlx94a67e5d6f4d\nsudo ifconfig wlx94a67e5d6f4d up\n</code></pre> <ol> <li>Once the adhoc network is up, you should be able to ping from the sender AutowareV2X PC to the receiver AutowareV2X PC if they are nearby.</li> </ol> <p>The <code>iwconfig</code> command can be used to check the adhoc network connection.</p> <pre><code># Sender AutowareV2X\nwlx94a67e5d6f4d  IEEE 802.11  ESSID:\"CITS-EXP\"  Mode:Ad-Hoc  Frequency:2.412 GHz  Cell: 0E:06:A2:BE:F5:6C   Tx-Power=18 dBm   Retry short limit:7   RTS thr:off   Fragment thr:off\n          Power Management:off\n\n# Receiver AutowareV2X\nwlx94a67e5d6f47  IEEE 802.11  ESSID:\"CITS-EXP\"  Mode:Ad-Hoc  Frequency:2.412 GHz  Cell: 0E:06:A2:BE:F5:6C   Tx-Power=18 dBm   Retry short limit:7   RTS thr:off   Fragment thr:off\n          Power Management:off\n</code></pre>"},{"location":"tutorials/actual-devices/#run-autoware-and-autowarev2x","title":"Run Autoware and AutowareV2X","text":"<ol> <li> <p>Run Autoware on the Autoware PC.</p> </li> <li> <p>At this point, if you run AutowareV2X as explained in the Run AutowareV2X Tutorial, you should see that AutowareV2X will generate CPMs from the object information it receives from the Autoware PC and send it out the network interface. <code>autoware_1</code> in the linked tutorial is the CPM Sender AutowareV2X PC, and <code>autoware_2</code> is the CPM Receiver AutowareV2X PC in this case.</p> </li> <li> <p>Check that the CPMs can be received on the receiver side.</p> </li> </ol>"},{"location":"tutorials/planning-simulation/","title":"Running AutowareV2X in the Planning Simulator","text":"<p>Simulations can be an easy way of verifying the functionality of AutowareV2X before an actual field test.</p> <p>AutowareV2X can be run in a simulation environment using Autoware's Planning Simulator. An ITS-S is composed of Autoware as the autonomous driving stack and AutowareV2X as its V2X communication stack. Each ITS-S is executed inside a Docker container, and the wireless communication medium between ITS-Ss are modeled with Docker networks. A dynamic ITS-S is defined as a CAV, while a static ITS-S is considered a RSU. Perceived Objects are sent out on the network as CPMs.</p> <p>Note</p> <p>Make sure you have completed Autoware's Planning Simulator Tutorial before continuing.</p> <p>In order to test both the sender and receiver functionalities, we will need at least two ITS-S instances.</p>"},{"location":"tutorials/planning-simulation/#the-docker-environment-to-create","title":"The Docker environment to create","text":"<p>We will be creating the Docker environment as depicted in the figure below. There will be two Docker containers to represent the two ITS-Ss, each of which includes Autoware.universe and AutowareV2X. They will both be a part of the Docker network called <code>v2x_net</code> with the subnet <code>10.0.0.0/24</code>. \"Autoware Container #1\" and \"Autoware Container #2\" will be described as <code>autoware_1</code> and <code>autoware_2</code> respectively.</p> <p></p>"},{"location":"tutorials/planning-simulation/#create-a-docker-network-for-v2x-communication","title":"Create a Docker network for V2X communication","text":"<pre><code>docker network create --driver=bridge --subnet=10.0.0.0/24 v2x_net -o com.docker.network.bridge.name=\"v2x_net\"\n</code></pre>"},{"location":"tutorials/planning-simulation/#launch-two-its-s-containers","title":"Launch two ITS-S containers","text":"<p>Note</p> <p>Here, we will use a Rocker extension called off-your-rocker. Install <code>off-your-rocker</code> by running the below: <pre><code>python3 -m pip install off-your-rocker\n</code></pre></p> <p>In one terminal, use rocker to launch container <code>autoware_1</code>: <pre><code>rocker --nvidia --x11 --user --privileged --volume $HOME/workspace/autoware_docker --volume $HOME/data --network=v2x_net --name autoware_1 --oyr-run-arg \"--ip 10.0.0.2 --hostname autoware_1\" -- ghcr.io/autowarefoundation/autoware-universe:latest-cuda\n</code></pre></p> <p>In another terminal, use rocker to launch container <code>autoware_2</code>: <pre><code>rocker --nvidia --x11 --user --privileged --volume $HOME/workspace/autoware_docker --volume $HOME/data --network=v2x_net --name autoware_2 --oyr-run-arg \"--ip 10.0.0.3 --hostname autoware_2\" -- ghcr.io/autowarefoundation/autoware-universe:latest-cuda\n</code></pre></p>"},{"location":"tutorials/planning-simulation/#run-planning-simulator","title":"Run Planning Simulator","text":"<p>Run the Planning Simulator in both <code>autoware_1</code> and <code>autoware_2</code>.</p> <p>In <code>autoware_1</code>:</p> <pre><code>cd ~/workspace/autoware_docker\nsource install/setup.bash\nexport AWID=1 # autoware_1\nsource ~/workspace/autoware_docker/src/v2x/autowarev2x/setup.sh\nros2 launch autoware_launch planning_simulator.launch.xml map_path:=$HOME/data/maps/sample-map-planning vehicle_model:=sample_vehicle sensor_model:=sample_sensor_kit\n</code></pre> <p>Also, in <code>autoware_1</code>, set the ego-vehicle position by clicking <code>2D Pose Estimate</code>.</p> <p>Try adding some dummy cars by clicking <code>2D Dummy Car</code>. Note that you can make the dummy cars to be static by changing its <code>Velocity</code> to <code>0</code> in the <code>Tool Properties</code> pane.</p> <p></p> <p></p> <p>In <code>autoware_2</code>:</p> <pre><code>cd ~/workspace/autoware_docker\nsource install/setup.bash\nexport AWID=2 # autoware_2\nsource ~/workspace/autoware_docker/src/v2x/autowarev2x/setup.sh\nros2 launch autoware_launch planning_simulator.launch.xml map_path:=$HOME/data/maps/sample-map-planning vehicle_model:=sample_vehicle sensor_model:=sample_sensor_kit\n</code></pre>"},{"location":"tutorials/planning-simulation/#run-autowarev2x","title":"Run AutowareV2X","text":"<p>In another terminal, connect to the <code>autoware_1</code> and <code>autoware_2</code> containers, and start AutowareV2X in both of them. We will set <code>autoware_1</code> to be the CPM sender, and <code>autoware_2</code> to be the CPM receiver.</p> <p>In <code>autoware_1</code>: <pre><code>docker exec -it autoware_1 bash\nsudo su\ncd workspace/autoware_docker\nsource install/setup.bash\nexport AWID=1\nsource ./src/v2x/autowarev2x/setup.sh\nros2 launch autoware_v2x v2x.launch.xml network_interface:=eth0\n</code></pre></p> <p>You should see the command output like below. It shows that you are \"Sending CPM with n objects\", and the <code>[objectsList]</code> line describes the following information: <code>cpm_num, objectID, object.uuid, object.to_send, object.to_send_trigger</code>. </p> <p>In <code>autoware_2</code>: <pre><code>docker exec -it autoware_2 bash\nsudo su\ncd workspace/autoware_docker\nsource install/setup.bash\nexport AWID=2\nsource ./src/v2x/autowarev2x/setup.sh\nros2 launch autoware_v2x v2x.launch.xml network_interface:=eth0 is_sender:=false\n</code></pre></p> <p>When both the sender and receiver is launched, you should see that the receiver (<code>autoware_2</code>) will start receiving CPMs like below.</p> <p></p>"},{"location":"tutorials/planning-simulation/#show-cpm-shared-objects-in-rviz","title":"Show CPM-shared objects in RViz","text":"<ol> <li>Press \"Add\" from the Displays Panel  </li> <li>Choose \"By topic\", then select PredictedObjects from /v2x/cpm/objects  </li> <li>The CPM-shared objects are shown in Rviz for <code>autoware_2</code>!  </li> </ol>"},{"location":"tutorials/planning-simulation/#run-scenarios","title":"Run scenarios","text":"<p>In order to run scenarios, the scenario_simulator_v2 must be installed:</p> <ol> <li>Launch new Autoware container <pre><code>rocker --nvidia --x11 --user --volume $HOME/workspace/autoware_docker --volume $HOME/data -- ghcr.io/autowarefoundation/autoware-universe:latest-cuda\n</code></pre></li> <li>Add <code>simulator.repos</code> <pre><code>cd workspace/autoware_docker\nvcs import src &lt; simulator.repos\n</code></pre></li> <li>Install dependent ROS packages <pre><code>sudo apt update\nrosdep update\nrosdep install --from-paths src --ignore-src --rosdistro $ROS_DISTRO -r\n</code></pre></li> <li>Rebuild workspace <pre><code>colcon build --symlink-install --cmake-args -DCMAKE_BUILD_TYPE=Release\n</code></pre></li> <li>Download scenario. <pre><code>gdown -O ~/data/scenarios/ 'https://drive.google.com/uc?id=1FXwSSWeFDTMz7qsG-J7pyJA6RgjksqCy'\n</code></pre></li> <li>Launch <code>scenario_test_runner</code> and specify scenario. <pre><code>ros2 launch scenario_test_runner scenario_test_runner.launch.py map_path:=$HOME/data/maps/sample-map-planning sensor_model:=sample_sensor_kit vehicle_model:=sample_vehicle scenario:=$HOME/data/scenarios/busy_kashiwa_scenario.yaml launch_autoware:=true\n</code></pre></li> </ol>"},{"location":"tutorials/planning-simulation/network-emulation/","title":"Network Emulation","text":"<p>The <code>tc</code> command can be used within the Docker container to emulate various network parameters.</p> <p>In <code>autoware_1</code> for example, use <code>tc</code> to add a delay of 100ms. <pre><code>sudo tc qdisc add dev eth0 root netem delay 100ms\n</code></pre></p> <p>To remove delay, simply: <pre><code>sudo tc qdisc delete dev eth0 root netem delay 100ms\n</code></pre></p> <p>To show all qdisc: <pre><code>sudo tc qdisc show\n</code></pre></p> <p>Documentation about tc-netem.</p>"},{"location":"tutorials/planning-simulation/rosbag-and-analysis/","title":"Recording Rosbag and Tcpdump for Analysis","text":""},{"location":"tutorials/planning-simulation/rosbag-and-analysis/#record-both-rosbag-and-tcpdump","title":"Record both rosbag and tcpdump","text":"<p>In <code>autoware_1</code>: <pre><code>docker exec -it autoware_1 bash\ncd ~/workspace/autoware_docker\nros2 bag record -o test_sender_rosbag /perception/object_recognition/objects /tf\n\nsudo apt update\nsudo apt install tcpdump\nsudo tcpdump -i eth0 -w test_sender_tcpdump.pcap\n</code></pre></p> <p>In <code>autoware_2</code>: <pre><code>docker exec -it autoware_2 bash\ncd ~/workspace/autoware_docker\nros2 bag record -o test_receiver_rosbag /v2x/cpm/objects /tf\n\nsudo apt update\nsudo apt install tcpdump\nsudo tcpdump -i eth0 -w test_receiver_tcpdump.pcap\n</code></pre></p>"},{"location":"tutorials/planning-simulation/rosbag-and-analysis/#open-pcap-file-in-wireshark","title":"Open PCAP file in Wireshark","text":""},{"location":"tutorials/planning-simulation/rosbag-and-analysis/#analyze-in-jupytelab","title":"Analyze in JupyteLab","text":""},{"location":"tutorials/planning-simulation/rosbag-and-analysis/#plot-the-xy-coordinates-of-objects-in-test_sender_rosbag","title":"Plot the x,y coordinates of objects in test_sender_rosbag","text":"<ol> <li>Export the necessary topics of the Rosbag to a CSV file</li> </ol>"}]}